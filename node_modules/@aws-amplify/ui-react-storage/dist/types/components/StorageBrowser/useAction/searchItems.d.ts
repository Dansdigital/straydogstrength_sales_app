type KeyWithStringValue<T> = keyof {
    [P in keyof T as T[P] extends string ? P : never]: T[P];
};
export interface SearchOptions<TItem> {
    query: string;
    /**
     * The key of the object in the list to filter by, which must have a string value.
     * Also accepts a function which takes an item and returns the appropriate key.
     * This determines where the `query` will be searched.
     */
    filterBy: KeyWithStringValue<TItem> | ((item: TItem) => KeyWithStringValue<TItem>);
    /**
     * Optional delimiter to group item keys.
     */
    groupBy?: string;
}
export declare const SEARCH_LIMIT = 10000;
export declare const SEARCH_PAGE_SIZE = 1000;
export declare function searchItems<T>({ prefix, items, options, }: {
    prefix?: string;
    items: T[];
    options: SearchOptions<T>;
}): T[];
export {};
