import React__default from 'react';
import { isFunction } from '@aws-amplify/ui';
import { useLocationItems } from '../../../locationItems/context.mjs';
import { useStore } from '../../../store/context.mjs';
import '../../../useAction/context.mjs';
import { useAction } from '../../../useAction/useAction.mjs';
import '@aws-amplify/ui-react-core';
import '@aws-amplify/ui-react-core/elements';
import '../../../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import '../../../configuration/context.mjs';
import 'aws-amplify/storage';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';

// assign to constant to ensure referential equality
const EMPTY_ITEMS = [];
const useDeleteView = (options) => {
    const { onExit: _onExit } = options ?? {};
    const [{ location }, storeDispatch] = useStore();
    const [locationItems, locationItemsDispatch] = useLocationItems();
    const { current } = location;
    const { fileDataItems: items = EMPTY_ITEMS } = locationItems;
    const [processState, handleProcess] = useAction('delete', { items });
    const { isProcessing, isProcessingComplete, statusCounts, tasks } = processState;
    const onActionStart = () => {
        if (!current)
            return;
        handleProcess();
    };
    const onActionCancel = () => {
        tasks.forEach((task) => {
            // @TODO Fixme, calling cancel on task doesn't currently work
            if (isFunction(task.cancel))
                task.cancel();
        });
    };
    const onActionExit = () => {
        // clear files state
        locationItemsDispatch({ type: 'RESET_LOCATION_ITEMS' });
        // clear selected action
        storeDispatch({ type: 'RESET_ACTION_TYPE' });
        if (isFunction(_onExit))
            _onExit(current);
    };
    const onTaskRemove = React__default.useCallback(({ data }) => {
        locationItemsDispatch({ type: 'REMOVE_LOCATION_ITEM', id: data.id });
    }, [locationItemsDispatch]);
    return {
        isProcessing,
        isProcessingComplete,
        location,
        statusCounts,
        tasks,
        onActionCancel,
        onActionExit,
        onActionStart,
        onTaskRemove,
    };
};

export { useDeleteView };
