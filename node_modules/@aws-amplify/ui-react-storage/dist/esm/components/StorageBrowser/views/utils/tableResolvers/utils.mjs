import { humanFileSize } from '@aws-amplify/ui';

const getFileType = (value, fallback = '') => value.lastIndexOf('.') !== -1
    ? value.slice(value.lastIndexOf('.') + 1)
    : fallback;
const getCellName = (value) => 
// `value.split` always returns an array with at least one entry
// ensruing `.pop()` will always return a string
value.split('/').pop();
const getUploadCellFolder = ({ data: { file: { webkitRelativePath }, }, }, fallback = '-') => webkitRelativePath
    ? webkitRelativePath.slice(0, webkitRelativePath.lastIndexOf('/') + 1)
    : fallback;
const getCopyCellFolder = ({ data: { fileKey, sourceKey }, }) => sourceKey.slice(0, -fileKey.length);
const getDeleteCellFolder = ({ data: { fileKey, key }, }) => key.slice(0, -fileKey.length);
const getUploadCellProgress = ({ progress, status, }) => {
    // prefer `progress` if available, 1 if status is complete, default 0
    const value = progress ?? (status === 'COMPLETE' ? 1 : 0);
    const displayValue = `${Math.round(value * 100)}%`;
    return { displayValue, value };
};
const getFileSize = (value, fallback = '-') => (!value ? fallback : humanFileSize(value, true));
const getCopyOrDeleteCancelCellContent = (data) => {
    const { item, props } = data;
    const { cancel, status } = item;
    const { isProcessing, onTaskRemove } = props;
    const isQueued = status === 'QUEUED';
    // a task is removable prior to processing start. Including `isQueued` ensures
    // that `isRemovable` is `false` on all tasks processing complete
    const isRemovable = isQueued && !isProcessing;
    // a task is cancelable while processing is true, and the task has a cancel handler
    const isCancelable = isProcessing && !!cancel;
    const ariaLabel = `${isRemovable ? 'Remove' : 'Cancel'} item: ${getCellName(item.data.fileKey)}`;
    const isDisabled = !isRemovable && !isCancelable;
    // resolve to `undefined` if not cancelable or removable
    const onClick = !isCancelable && !isRemovable
        ? undefined
        : () => {
            if (isRemovable) {
                onTaskRemove?.(item);
                // do not run cancel handler on remove
                return;
            }
            if (isCancelable)
                cancel();
        };
    return { ariaLabel, isDisabled, onClick, icon: 'cancel' };
};

export { getCellName, getCopyCellFolder, getCopyOrDeleteCancelCellContent, getDeleteCellFolder, getFileSize, getFileType, getUploadCellFolder, getUploadCellProgress };
