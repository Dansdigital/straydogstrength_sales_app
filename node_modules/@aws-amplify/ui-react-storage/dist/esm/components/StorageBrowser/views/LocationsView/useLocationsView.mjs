import React__default from 'react';
import '@aws-amplify/storage/internals';
import { getFileKey } from '../../actions/handlers/utils.mjs';
import '@aws-amplify/ui';
import 'aws-amplify/storage';
import '../../actions/configs/context.mjs';
import '../../actions/configs/defaults.mjs';
import { useStore } from '../../store/context.mjs';
import '../../useAction/context.mjs';
import { useAction } from '../../useAction/useAction.mjs';
import { useList } from '../../useAction/useList.mjs';
import { usePaginate } from '../hooks/usePaginate.mjs';
import { useSearch } from '../hooks/useSearch.mjs';

const DEFAULT_EXCLUDE = {
    exactPermissions: ['delete', 'write'],
};
const DEFAULT_PAGE_SIZE = 100;
const DEFAULT_LIST_OPTIONS = {
    exclude: DEFAULT_EXCLUDE,
    pageSize: DEFAULT_PAGE_SIZE,
};
const useLocationsView = (options) => {
    const handleDownload = useAction('download')[1];
    const [state, handleList] = useList('locations');
    const dispatchStoreAction = useStore()[1];
    const { value, message, hasError, isLoading } = state;
    const { items, nextToken, hasExhaustedSearch = false } = value;
    const hasNextToken = !!nextToken;
    const onNavigate = options?.onNavigate;
    const initialValues = options?.initialValues ?? {};
    const listOptionsRef = React__default.useRef({
        ...DEFAULT_LIST_OPTIONS,
        ...initialValues,
    });
    const listOptions = listOptionsRef.current;
    // initial load
    React__default.useEffect(() => {
        handleList({ options: { ...listOptions, refresh: true } });
    }, [handleList, listOptions]);
    // set up pagination
    const onPaginate = () => {
        if (!nextToken)
            return;
        handleList({ options: { ...listOptions, nextToken } });
    };
    const { currentPage, handlePaginate, handleReset, highestPageVisited, pageItems, } = usePaginate({
        items,
        onPaginate,
        pageSize: listOptions.pageSize,
    });
    const onSearch = (query) => {
        handleReset();
        handleList({
            options: {
                ...listOptions,
                search: {
                    query,
                    filterBy: (location) => {
                        return location.prefix ? 'prefix' : 'bucket';
                    },
                },
            },
        });
    };
    const { searchQuery, onSearchQueryChange, onSearchSubmit, resetSearch } = useSearch({ onSearch });
    return {
        isLoading,
        hasError,
        message,
        page: currentPage,
        hasNextPage: hasNextToken,
        highestPageVisited,
        pageItems,
        searchQuery,
        hasExhaustedSearch,
        onDownload: (location) => {
            const { prefix: key } = location;
            handleDownload({
                data: {
                    fileKey: getFileKey(key),
                    key,
                    id: crypto.randomUUID(),
                },
                location,
            });
        },
        onNavigate: (location) => {
            onNavigate?.(location);
            dispatchStoreAction({ type: 'CHANGE_LOCATION', location });
        },
        onRefresh: () => {
            resetSearch();
            handleReset();
            handleList({ options: { ...listOptions, refresh: true } });
        },
        onPaginate: handlePaginate,
        onSearch: onSearchSubmit,
        onSearchQueryChange,
        onSearchClear: () => {
            resetSearch();
            handleReset();
            handleList({
                options: { ...listOptions, refresh: true },
            });
        },
    };
};

export { DEFAULT_LIST_OPTIONS, useLocationsView };
