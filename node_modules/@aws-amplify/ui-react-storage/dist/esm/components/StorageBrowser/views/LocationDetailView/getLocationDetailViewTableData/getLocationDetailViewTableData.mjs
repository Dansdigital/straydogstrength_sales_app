import '@aws-amplify/storage/internals';
import { createFileDataItem } from '../../../actions/handlers/utils.mjs';
import '@aws-amplify/ui';
import 'aws-amplify/storage';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';
import { getFileRowContent } from './getFileRowContent.mjs';
import { getFolderRowContent } from './getFolderRowContent.mjs';
import { getHeaders } from './getHeaders.mjs';

const getLocationDetailViewTableData = ({ areAllFilesSelected, displayText, location, fileDataItems, hasFiles, pageItems, selectFileLabel, selectAllFilesLabel, getDateDisplayValue, onDownload, onNavigate, onSelect, onSelectAll, }) => {
    const { tableColumnLastModifiedHeader, tableColumnNameHeader, tableColumnSizeHeader, tableColumnTypeHeader, } = displayText;
    const headers = getHeaders({
        areAllFilesSelected,
        selectAllFilesLabel,
        hasFiles,
        onSelectAll,
        tableColumnLastModifiedHeader,
        tableColumnNameHeader,
        tableColumnSizeHeader,
        tableColumnTypeHeader,
    });
    const rows = pageItems.map((locationItem) => {
        const { id, key, type } = locationItem;
        switch (type) {
            case 'FILE': {
                const { lastModified, size } = locationItem;
                const { current, path } = location;
                const isSelected = fileDataItems?.some((item) => item.id === id) ?? false;
                const onFileDownload = () => {
                    onDownload(createFileDataItem(locationItem));
                };
                const onFileSelect = () => {
                    onSelect(isSelected, locationItem);
                };
                return {
                    key: id,
                    content: getFileRowContent({
                        permissions: current?.permissions ?? [],
                        isSelected,
                        itemLocationKey: `${current?.prefix ?? ''}${path}`,
                        lastModified,
                        getDateDisplayValue,
                        rowId: id,
                        rowKey: key,
                        selectFileLabel,
                        size,
                        onDownload: onFileDownload,
                        onSelect: onFileSelect,
                    }),
                };
            }
            case 'FOLDER': {
                const { current, path } = location;
                const itemSubPath = key.slice(`${current?.prefix ?? ''}${path}`.length);
                const itemLocationPath = key.slice(current?.prefix.length);
                const onFolderNavigate = () => {
                    if (!current) {
                        return;
                    }
                    onNavigate({ ...current, id }, itemLocationPath);
                };
                return {
                    key: id,
                    content: getFolderRowContent({
                        itemSubPath,
                        rowId: id,
                        onNavigate: onFolderNavigate,
                    }),
                };
            }
        }
    });
    return { headers, rows };
};

export { getLocationDetailViewTableData };
