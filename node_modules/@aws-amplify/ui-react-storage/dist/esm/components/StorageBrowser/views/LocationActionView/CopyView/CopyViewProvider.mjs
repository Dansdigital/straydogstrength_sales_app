import React__default from 'react';
import '@aws-amplify/ui';
import '@aws-amplify/ui-react';
import '../../../components/elements/definitions.mjs';
import '../../../components/elements/IconElement.mjs';
import { ControlsContextProvider } from '../../../controls/context.mjs';
import '../../../components/composables/context.mjs';
import '@aws-amplify/ui-react-core';
import '@aws-amplify/ui-react-core/elements';
import { useDisplayText } from '../../../displayText/context.mjs';
import useResolveTableData from '../../hooks/useResolveTableData/useResolveTableData.mjs';
import { COPY_TABLE_RESOLVERS, COPY_TABLE_KEYS } from '../../utils/tableResolvers/copyResolvers.mjs';
import { FoldersMessageProvider } from './FoldersMessageControl.mjs';
import { FoldersPaginationProvider } from './FoldersPaginationControl.mjs';
import { FoldersTableProvider } from './FoldersTableControl.mjs';

function CopyViewProvider({ children, ...props }) {
    const { CopyView: displayText } = useDisplayText();
    const { actionCancelLabel, actionDestinationLabel, actionExitLabel, actionStartLabel, getActionCompleteMessage, overwriteWarningMessage, searchPlaceholder, searchSubmitLabel, searchClearLabel, statusDisplayCanceledLabel, statusDisplayCompletedLabel, statusDisplayFailedLabel, statusDisplayQueuedLabel, title, } = displayText;
    const { destination, folders, isProcessing, isProcessingComplete, statusCounts, tasks: items, onActionCancel, onActionExit, onActionStart, onSelectDestination, onTaskRemove, } = props;
    const { hasNextPage, highestPageVisited, hasError: hasFoldersError, message: foldersErrorMessage, query, hasExhaustedSearch, isLoading, page, pageItems, onPaginate, onQuery, onSearchClear, onSearch, onSelectFolder, } = folders;
    const tableData = useResolveTableData(COPY_TABLE_KEYS, COPY_TABLE_RESOLVERS, {
        items,
        props: { displayText, isProcessing, onTaskRemove },
    });
    const isActionStartDisabled = isProcessing || isProcessingComplete || !destination?.current;
    const isActionCancelDisabled = !isProcessing || isProcessingComplete;
    const message = !isProcessingComplete
        ? {
            content: overwriteWarningMessage,
            type: 'warning',
        }
        : getActionCompleteMessage({ counts: statusCounts });
    return (React__default.createElement(ControlsContextProvider, { data: {
            actionCancelLabel,
            actionDestinationLabel,
            actionExitLabel,
            actionStartLabel,
            destination,
            isActionCancelDisabled,
            isActionDestinationNavigable: !isProcessing && !isProcessingComplete,
            isActionExitDisabled: isProcessing,
            isActionStartDisabled,
            isLoading,
            message,
            searchQuery: query,
            searchPlaceholder,
            searchSubmitLabel,
            searchClearLabel,
            statusCounts,
            statusDisplayCanceledLabel,
            statusDisplayCompletedLabel,
            statusDisplayFailedLabel,
            statusDisplayQueuedLabel,
            tableData,
            title,
        }, onActionCancel: onActionCancel, onActionExit: onActionExit, onActionStart: onActionStart, onSearch: onSearch, onSearchClear: onSearchClear, onSearchQueryChange: onQuery, onSelectDestination: onSelectDestination },
        React__default.createElement(FoldersPaginationProvider, { hasNextPage: hasNextPage, highestPageVisited: highestPageVisited, page: page, onPaginate: onPaginate },
            React__default.createElement(FoldersTableProvider, { destination: destination, folders: pageItems, onSelectFolder: onSelectFolder },
                React__default.createElement(FoldersMessageProvider, { folders: folders.pageItems, hasError: hasFoldersError, message: foldersErrorMessage, query: query, hasExhaustedSearch: hasExhaustedSearch }, children)))));
}

export { CopyViewProvider };
