import React__default from 'react';
import { ControlsContextProvider } from '../../../controls/context.mjs';
import { useDisplayText } from '../../../displayText/context.mjs';
import '@aws-amplify/ui';
import { isValidFolderName } from './utils.mjs';

function CreateFolderViewProvider({ children, ...props }) {
    const { CreateFolderView: { actionExitLabel, actionStartLabel, folderNameLabel, folderNamePlaceholder, getActionCompleteMessage, getValidationMessage, title, }, } = useDisplayText();
    const { folderName, folderNameId, isProcessing, isProcessingComplete, onActionStart, onActionExit, onFolderNameChange, statusCounts, } = props;
    const [validationMessage, setValidationMessage] = React__default.useState();
    const message = isProcessingComplete
        ? getActionCompleteMessage({ counts: statusCounts })
        : undefined;
    const onValidateFolderName = (value) => {
        setValidationMessage(() => isValidFolderName(value) ? undefined : getValidationMessage(value));
    };
    const isActionStartDisabled = !folderName.length ||
        !!validationMessage ||
        isProcessing ||
        isProcessingComplete;
    return (React__default.createElement(ControlsContextProvider, { data: {
            actionExitLabel,
            folderNameId,
            folderNameLabel,
            folderNamePlaceholder,
            folderNameValidationMessage: validationMessage,
            actionStartLabel,
            isActionStartDisabled,
            isActionExitDisabled: isProcessing,
            message,
            title,
        }, onActionExit: onActionExit, onActionStart: onActionStart, onFolderNameChange: onFolderNameChange, onValidateFolderName: onValidateFolderName }, children));
}

export { CreateFolderViewProvider };
