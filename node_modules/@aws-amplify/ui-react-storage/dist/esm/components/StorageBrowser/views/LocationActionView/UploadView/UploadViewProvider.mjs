import React__default from 'react';
import '@aws-amplify/storage/internals';
import { isMultipartUpload } from '../../../actions/handlers/utils.mjs';
import '@aws-amplify/ui';
import 'aws-amplify/storage';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';
import { ControlsContextProvider } from '../../../controls/context.mjs';
import { useDisplayText } from '../../../displayText/context.mjs';
import useResolveTableData from '../../hooks/useResolveTableData/useResolveTableData.mjs';
import { UPLOAD_TABLE_RESOLVERS, UPLOAD_TABLE_KEYS } from '../../utils/tableResolvers/uploadResolvers.mjs';

function UploadViewProvider({ children, ...props }) {
    const { UploadView: displayText } = useDisplayText();
    const { actionCancelLabel, actionDestinationLabel, actionExitLabel, actionStartLabel, addFilesLabel, addFolderLabel, statusDisplayCanceledLabel, statusDisplayCompletedLabel, statusDisplayFailedLabel, statusDisplayQueuedLabel, overwriteToggleLabel, title, getActionCompleteMessage, getFilesValidationMessage, } = displayText;
    const { isOverwritingEnabled, isProcessing, isProcessingComplete, location, tasks: items, statusCounts, invalidFiles, onActionStart, onActionCancel, onDropFiles, onActionExit, onTaskRemove, onSelectFiles, onToggleOverwrite, } = props;
    const isActionStartDisabled = isProcessing || isProcessingComplete || statusCounts.TOTAL === 0;
    const isActionCancelDisabled = !isProcessing || isProcessingComplete;
    const isAddFilesDisabled = isProcessing || isProcessingComplete;
    const isAddFolderDisabled = isProcessing || isProcessingComplete;
    const isActionExitDisabled = isProcessing;
    const actionCompleteMessage = isProcessingComplete
        ? getActionCompleteMessage({
            counts: statusCounts,
        })
        : undefined;
    const filesValidationMessage = invalidFiles && !isProcessing
        ? getFilesValidationMessage({ invalidFiles })
        : undefined;
    const tableData = useResolveTableData(UPLOAD_TABLE_KEYS, UPLOAD_TABLE_RESOLVERS, {
        items,
        props: { displayText, isProcessing, isMultipartUpload, onTaskRemove },
    });
    return (React__default.createElement(ControlsContextProvider, { data: {
            actionCancelLabel,
            actionDestinationLabel,
            actionExitLabel,
            actionStartLabel,
            addFilesLabel,
            addFolderLabel,
            isActionCancelDisabled,
            isActionExitDisabled,
            isActionStartDisabled,
            isAddFilesDisabled,
            isAddFolderDisabled,
            isActionDestinationNavigable: false,
            isOverwriteToggleDisabled: isProcessing || isProcessingComplete,
            isOverwritingEnabled,
            overwriteToggleLabel,
            destination: location,
            message: actionCompleteMessage ?? filesValidationMessage,
            statusCounts,
            statusDisplayCanceledLabel,
            statusDisplayCompletedLabel,
            statusDisplayFailedLabel,
            statusDisplayQueuedLabel,
            tableData,
            title,
        }, onActionCancel: onActionCancel, onActionExit: onActionExit, onActionStart: onActionStart, onAddFiles: () => {
            onSelectFiles('FILE');
        }, onAddFolder: () => {
            onSelectFiles('FOLDER');
        }, onDropFiles: onDropFiles, onToggleOverwrite: onToggleOverwrite }, children));
}

export { UploadViewProvider };
