import React__default, { useRef, useState } from 'react';
import { isFunction } from '@aws-amplify/ui';
import { useLocationItems } from '../../../locationItems/context.mjs';
import { useStore } from '../../../store/context.mjs';
import '../../../useAction/context.mjs';
import { useAction } from '../../../useAction/useAction.mjs';
import '@aws-amplify/ui-react-core';
import '@aws-amplify/ui-react-core/elements';
import '../../../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import '../../../configuration/context.mjs';
import 'aws-amplify/storage';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';
import { useFolders } from './useFolders.mjs';

const useCopyView = (options) => {
    const { onExit } = options ?? {};
    const [{ location }, storeDispatch] = useStore();
    const [{ fileDataItems }, locationItemsDispatch] = useLocationItems();
    const idLookup = useRef({});
    const [destination, setDestination] = useState(location);
    const data = React__default.useMemo(() => {
        idLookup.current = {};
        return fileDataItems?.map((item) => {
            // generate new `id` on each `destination.key` change to refresh
            // task data provided to `useActon`
            const id = crypto.randomUUID();
            idLookup.current[id] = item.id;
            return {
                ...item,
                id,
                key: `${destination.key}${item.fileKey}`,
                sourceKey: item.key,
            };
        });
    }, [destination.key, fileDataItems]);
    const folders = useFolders({ destination, setDestination });
    const [processState, handleProcess] = useAction('copy', { items: data });
    const { isProcessing, isProcessingComplete, statusCounts, tasks } = processState;
    const { current } = location;
    const { onInitialize } = folders;
    // initial load
    React__default.useEffect(() => {
        onInitialize();
    }, [onInitialize]);
    const onActionStart = () => {
        handleProcess();
    };
    const onActionCancel = () => {
        tasks.forEach((task) => {
            if (isFunction(task.cancel))
                task.cancel();
        });
    };
    const onActionExit = () => {
        // clear files state
        locationItemsDispatch({ type: 'RESET_LOCATION_ITEMS' });
        // clear selected action
        storeDispatch({ type: 'RESET_ACTION_TYPE' });
        if (isFunction(onExit))
            onExit(current);
    };
    const onTaskRemove = React__default.useCallback(({ data }) => {
        locationItemsDispatch({
            type: 'REMOVE_LOCATION_ITEM',
            id: idLookup.current[data.id],
        });
    }, [locationItemsDispatch]);
    const onSelectDestination = (selectedDestination, path) => {
        setDestination({
            current: selectedDestination,
            path: path ?? '',
            key: `${selectedDestination.prefix ?? ''}${path}`,
        });
    };
    return {
        destination,
        isProcessing,
        isProcessingComplete,
        folders,
        location,
        statusCounts,
        tasks,
        onActionCancel,
        onActionStart,
        onActionExit,
        onSelectDestination,
        onTaskRemove,
    };
};

export { useCopyView };
