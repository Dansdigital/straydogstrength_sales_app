import React__default from 'react';
import '../../../useAction/context.mjs';
import '@aws-amplify/ui-react-core/elements';
import '../../../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import '../../../configuration/context.mjs';
import '@aws-amplify/ui';
import { useList } from '../../../useAction/useList.mjs';
import 'aws-amplify/storage';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';
import { usePaginate } from '../../hooks/usePaginate.mjs';
import { useSearch } from '../../hooks/useSearch.mjs';

const DEFAULT_PAGE_SIZE = 100;
const DEFAULT_LIST_OPTIONS = {
    pageSize: DEFAULT_PAGE_SIZE,
    delimiter: '/',
    exclude: 'FILE',
};
const DEFAULT_REFRESH_OPTIONS = { ...DEFAULT_LIST_OPTIONS, refresh: true };
const useFolders = ({ destination, setDestination, }) => {
    const { current, key } = destination;
    const [{ value, hasError, isLoading, message }, handleList] = useList('folderItems');
    const { items, nextToken, hasExhaustedSearch = false } = value;
    const onInitialize = React__default.useCallback(() => {
        handleList({
            prefix: key,
            options: { ...DEFAULT_REFRESH_OPTIONS },
        });
    }, [handleList, key]);
    const hasNextPage = !!nextToken;
    const onPaginate = () => {
        if (!hasNextPage)
            return;
        handleList({
            prefix: key,
            options: { ...DEFAULT_LIST_OPTIONS, nextToken },
        });
    };
    const { currentPage: page, handlePaginate, highestPageVisited, pageItems, handleReset, } = usePaginate({
        items,
        onPaginate,
        pageSize: DEFAULT_PAGE_SIZE,
    });
    const onSearch = (query) => {
        handleReset();
        handleList({
            prefix: key,
            options: { ...DEFAULT_LIST_OPTIONS, search: { query, filterBy: 'key' } },
        });
    };
    const { onSearchSubmit, searchQuery: query, resetSearch, onSearchQueryChange: onQuery, } = useSearch({ onSearch });
    const onSelectFolder = (id, folderLocationPath) => {
        if (!current) {
            return;
        }
        resetSearch();
        setDestination({
            current: { ...current, id },
            path: folderLocationPath,
            key: `${current.prefix ?? ''}${folderLocationPath}`,
        });
    };
    return {
        hasError,
        hasNextPage,
        highestPageVisited,
        isLoading,
        message,
        onInitialize,
        page,
        pageItems,
        query,
        hasExhaustedSearch,
        onPaginate: handlePaginate,
        onQuery,
        onSearch: onSearchSubmit,
        onSearchClear: () => {
            handleReset();
            resetSearch();
            handleList({
                prefix: key,
                options: { ...DEFAULT_REFRESH_OPTIONS },
            });
        },
        onSelectFolder,
    };
};

export { DEFAULT_LIST_OPTIONS, useFolders };
