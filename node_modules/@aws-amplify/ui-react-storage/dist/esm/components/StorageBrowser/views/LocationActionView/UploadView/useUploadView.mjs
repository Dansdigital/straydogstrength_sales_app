import React__default from 'react';
import { isUndefined } from '@aws-amplify/ui';
import { useFiles } from '../../../files/context.mjs';
import { useStore } from '../../../store/context.mjs';
import '../../../useAction/context.mjs';
import { useAction } from '../../../useAction/useAction.mjs';
import '@aws-amplify/ui-react-core';
import '@aws-amplify/ui-react-core/elements';
import '../../../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import '../../../configuration/context.mjs';
import 'aws-amplify/storage';
import { isFileTooBig } from '../../../validators/isFileTooBig.mjs';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';
import { DEFAULT_OVERWRITE_ENABLED } from './constants.mjs';

const useUploadView = (options) => {
    const { onExit: _onExit } = options ?? {};
    const [{ location }, storeDispatch] = useStore();
    const [files, filesDispatch] = useFiles();
    const { current } = location;
    const [isOverwritingEnabled, setIsOverwritingEnabled] = React__default.useState(DEFAULT_OVERWRITE_ENABLED);
    const filesData = React__default.useMemo(() => (files ?? [])?.reduce((curr, item) => {
        if (isFileTooBig(item.file)) {
            curr.invalidFiles = isUndefined(curr.invalidFiles)
                ? [item]
                : curr.invalidFiles.concat(item);
        }
        else {
            curr.validFiles = isUndefined(curr.validFiles)
                ? [item]
                : curr.validFiles.concat(item);
            const parsedFileItem = {
                ...item,
                key: `${location.key}${item.key}`,
            };
            curr.data = curr.data.concat({
                ...parsedFileItem,
                preventOverwrite: !isOverwritingEnabled,
            });
        }
        return curr;
    }, { invalidFiles: undefined, validFiles: undefined, data: [] }), [files, isOverwritingEnabled, location.key]);
    const { data, invalidFiles } = filesData;
    const [{ isProcessing, isProcessingComplete, statusCounts, tasks }, handleUploads,] = useAction('upload', { items: data });
    const onDropFiles = (files) => {
        if (files) {
            filesDispatch({ type: 'ADD_FILE_ITEMS', files });
        }
    };
    const onSelectFiles = (type) => {
        filesDispatch({ type: 'SELECT_FILES', selectionType: type });
    };
    const onActionStart = () => {
        invalidFiles?.forEach((file) => {
            filesDispatch({ type: 'REMOVE_FILE_ITEM', id: file.id });
        });
        handleUploads();
    };
    const onActionCancel = () => {
        tasks.forEach((task) => task.cancel?.());
    };
    const onActionExit = () => {
        // clear files state
        filesDispatch({ type: 'RESET_FILE_ITEMS' });
        // clear selected action
        storeDispatch({ type: 'RESET_ACTION_TYPE' });
        _onExit?.(current);
    };
    const onToggleOverwrite = () => {
        setIsOverwritingEnabled((prev) => !prev);
    };
    const onTaskRemove = ({ data }) => {
        filesDispatch({ type: 'REMOVE_FILE_ITEM', id: data.id });
    };
    return {
        isProcessing,
        isProcessingComplete,
        isOverwritingEnabled,
        location,
        invalidFiles,
        statusCounts,
        tasks,
        onActionCancel,
        onActionExit,
        onActionStart,
        onDropFiles,
        onTaskRemove,
        onSelectFiles,
        onToggleOverwrite,
    };
};

export { useUploadView };
