import './LocationActionView/CopyView/CopyView.mjs';
import { useCopyView } from './LocationActionView/CopyView/useCopyView.mjs';
import './LocationActionView/CreateFolderView/CreateFolderView.mjs';
import { useCreateFolderView } from './LocationActionView/CreateFolderView/useCreateFolderView.mjs';
import './LocationActionView/DeleteView/DeleteView.mjs';
import { useDeleteView } from './LocationActionView/DeleteView/useDeleteView.mjs';
import 'react';
import '../store/context.mjs';
import './context/actionViews.mjs';
import './LocationActionView/UploadView/UploadView.mjs';
import { useUploadView } from './LocationActionView/UploadView/useUploadView.mjs';
import './LocationDetailView/LocationDetailView.mjs';
import { useLocationDetailView } from './LocationDetailView/useLocationDetailView.mjs';
import './LocationsView/LocationsView.mjs';
import { useLocationsView } from './LocationsView/useLocationsView.mjs';

const USE_VIEW_HOOKS = {
    Copy: useCopyView,
    CreateFolder: useCreateFolderView,
    Delete: useDeleteView,
    LocationDetail: useLocationDetailView,
    Locations: useLocationsView,
    Upload: useUploadView,
};
const isUseViewType = (value) => !!USE_VIEW_HOOKS?.[value];
const useView = (type) => {
    if (!isUseViewType(type)) {
        throw new Error(`Value of \`${type}\` cannot be used to index \`useView\``);
    }
    return USE_VIEW_HOOKS[type]();
};

export { USE_VIEW_HOOKS, useView };
