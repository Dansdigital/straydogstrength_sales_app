import React__default from 'react';
import { isFunction } from '@aws-amplify/ui';
import '../../../useAction/context.mjs';
import { useAction } from '../../../useAction/useAction.mjs';
import '@aws-amplify/ui-react-core';
import '@aws-amplify/ui-react-core/elements';
import '../../../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import '../../../configuration/context.mjs';
import 'aws-amplify/storage';
import '../../../actions/configs/context.mjs';
import '../../../actions/configs/defaults.mjs';
import { useStore } from '../../../store/context.mjs';

const useCreateFolderView = (options) => {
    const { onExit } = options ?? {};
    const [folderName, setFolderName] = React__default.useState('');
    const folderNameId = React__default.useRef(crypto.randomUUID()).current;
    const [{ location }, dispatchStoreAction] = useStore();
    const { current, key } = location;
    const data = React__default.useMemo(() => [
        {
            // generate new `id` on each `folderName` change to refresh task
            // data provided to `useAction`
            id: crypto.randomUUID(),
            key: `${key}${folderName}/`,
            preventOverwrite: true,
        },
    ], [key, folderName]);
    const [{ tasks, isProcessing, isProcessingComplete, statusCounts }, handleCreateFolder,] = useAction('createFolder', { items: data });
    return {
        folderName,
        folderNameId,
        isProcessing,
        isProcessingComplete,
        location,
        onActionStart: () => {
            handleCreateFolder();
        },
        onActionExit: () => {
            if (isFunction(onExit))
                onExit(current);
            dispatchStoreAction({ type: 'RESET_ACTION_TYPE' });
        },
        onFolderNameChange: (value) => {
            setFolderName(value.trim());
        },
        statusCounts,
        tasks,
    };
};

export { useCreateFolderView };
