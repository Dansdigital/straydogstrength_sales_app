import React__default from 'react';
import { useCredentials } from '../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import { useStore } from '../store/context.mjs';
import { assertLocationData, assertPrefix } from '../validators/assertLocationData.mjs';
import '@aws-amplify/ui';

const getErrorMessage = (propertyName) => `Unable to resolve credentials due to invalid value of '${propertyName}'`;
function useGetActionInputCallback({ accountId, customEndpoint, region, }) {
    const { getCredentials } = useCredentials();
    const [{ location }] = useStore();
    const { current, key } = location;
    return React__default.useCallback((_location) => {
        // prefer passed in location / prefix over current location in state
        const location = _location ?? current;
        // when `location` has been provided as a param, resolve `_prefix` to `location.prefix`.
        // in the default scenario where `current` is the target `location` use the fully qualified `key`
        // that includes the default `prefix` and any additional prefixes from navigation
        const prefix = _location ? _location.prefix : key;
        assertLocationData(location, getErrorMessage('locationData'));
        assertPrefix(prefix, getErrorMessage('prefix'));
        const { bucket, permissions, type } = location;
        // BUCKET/PREFIX grants end with `*`, but object grants do not.
        const scope = `s3://${bucket}/${prefix}${type === 'OBJECT' ? '' : '*'}`;
        return {
            accountId,
            bucket,
            credentials: getCredentials({
                permissions,
                scope,
            }),
            region,
            customEndpoint,
        };
    }, [accountId, current, customEndpoint, getCredentials, key, region]);
}

export { getErrorMessage, useGetActionInputCallback };
