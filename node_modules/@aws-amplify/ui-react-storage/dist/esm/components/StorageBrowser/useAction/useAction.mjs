import { useActionHandlers } from './context.mjs';
import { useHandler } from './useHandler.mjs';

const ERROR_MESSAGE = '`useAction` must be called from within `StorageBrowser.Provider`';
function assertActionHandlerKey(key) {
    if (key === 'listLocations' || key === 'listLocationItems') {
        throw new Error(`Value of \`${key}\` cannot be provided to \`useAction\``);
    }
}
function assertActionHandler(handler, key) {
    if (typeof handler !== 'function') {
        throw new Error(`No handler found for value of \`${key}\` provided to \`useAction\``);
    }
}
const useAction = ((key, options) => {
    assertActionHandlerKey(key);
    const { handlers } = useActionHandlers({ errorMessage: ERROR_MESSAGE });
    const handler = handlers?.[key];
    assertActionHandler(handler, key);
    return useHandler(handler, options);
    // casting to allow usage of `UseAction` interface which ensures that
    // the `options` param receives the correct typing
});

export { ERROR_MESSAGE, useAction };
