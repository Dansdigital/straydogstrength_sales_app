import React__default from 'react';
import '@aws-amplify/ui-react-core/elements';
import '../credentials/context.mjs';
import '@aws-amplify/storage/internals';
import { useGetActionInput } from '../configuration/context.mjs';
import { DEFAULT_ACTION_CONCURRENCY } from './constants.mjs';
import { useProcessTasks } from '../tasks/useProcessTasks.mjs';

const isOptionsWithItems = (options) => !!options?.items;
const isHandleTaskInput = (value) => !!value?.data;
function useHandler(handler, options) {
    const [state, handleProcessing] = useProcessTasks(handler, options);
    const getConfig = useGetActionInput();
    const { reset, isProcessing, tasks, ...rest } = state;
    const handleDispatch = React__default.useCallback((input) => {
        const config = getConfig(input?.location);
        const hasData = isHandleTaskInput(input);
        // clean up previous state for atomic handler
        if (hasData)
            reset();
        handleProcessing({
            config,
            ...(hasData
                ? { data: input.data }
                : // if no `data` provided, provide `concurrency` to `options`
                    { options: { concurrency: DEFAULT_ACTION_CONCURRENCY } }),
        });
    }, [getConfig, handleProcessing, reset]);
    if (isOptionsWithItems(options)) {
        return [{ ...rest, isProcessing, reset, tasks }, handleDispatch];
    }
    return [{ isProcessing, task: tasks?.[0] }, handleDispatch];
}

export { useHandler };
