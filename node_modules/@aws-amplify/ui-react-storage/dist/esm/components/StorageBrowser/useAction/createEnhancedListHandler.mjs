import { searchItems } from './searchItems.mjs';

const SEARCH_LIMIT = 10000;
const SEARCH_PAGE_SIZE = 1000;
const createEnhancedListHandler = (handler) => {
    return async function listActionHandler(prevState, { options, ...input }) {
        const { nextToken: _nextToken, refresh, reset, search, ...rest } = options ?? {};
        if (reset) {
            return { items: [], nextToken: undefined };
        }
        // collect and filter results on `search`
        if (search) {
            const items = [];
            let nextToken = undefined;
            do {
                const output = await handler({
                    ...input,
                    options: { ...rest, pageSize: SEARCH_PAGE_SIZE, nextToken },
                });
                items.push(...output.items);
                // eslint-disable-next-line prefer-destructuring
                nextToken = output.nextToken;
            } while (nextToken && items.length < SEARCH_LIMIT);
            return {
                items: searchItems({ items, prefix: input.prefix, options: search }),
                // search limit reached but we still have a next token
                hasExhaustedSearch: !!nextToken,
                nextToken: undefined,
            };
        }
        // ignore provided `nextToken` on `refresh`
        const nextToken = refresh ? undefined : _nextToken;
        const output = await handler({
            ...input,
            options: { ...rest, nextToken },
        });
        const items = [...(refresh ? [] : prevState.items), ...output.items];
        return { ...output, items };
    };
};

export { SEARCH_LIMIT, SEARCH_PAGE_SIZE, createEnhancedListHandler };
