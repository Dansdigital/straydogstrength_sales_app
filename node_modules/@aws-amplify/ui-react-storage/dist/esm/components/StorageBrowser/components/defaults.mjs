import * as React from 'react';
import { Heading, TextField, View, CheckboxField, SearchField as SearchField$1, Breadcrumbs, Pagination as Pagination$1, Loader, Button, Menu, MenuItem } from '@aws-amplify/ui-react';
import '@aws-amplify/ui';
import './elements/definitions.mjs';
import { IconElement } from './elements/IconElement.mjs';
import { STORAGE_BROWSER_BLOCK } from './base/constants.mjs';

const OverwriteToggle = ({ isDisabled, isOverwritingEnabled, label = '', onToggle, }) => {
    return (React.createElement(CheckboxField, { name: label, label: label, labelPosition: "end", isDisabled: isDisabled, checked: isOverwritingEnabled, onChange: () => {
            onToggle?.();
        } }));
};
const SearchSubfoldersToggle = ({ isSearchingSubfolders, label = '', onToggle }) => {
    return (React.createElement(CheckboxField, { name: label, label: label, labelPosition: "end", checked: isSearchingSubfolders, onChange: () => {
            onToggle?.();
        } }));
};
const Pagination = ({ page = 1, onPaginate, hasNextPage, highestPageVisited, }) => {
    return (React.createElement(Pagination$1, { currentPage: page, totalPages: highestPageVisited ?? 1, hasMorePages: hasNextPage, siblingCount: 1, onChange: (index) => {
            onPaginate?.(index ?? 0);
        }, onNext: () => {
            onPaginate?.(page + 1);
        }, onPrevious: () => {
            onPaginate?.(page - 1);
        } }));
};
const SearchField = ({ onQueryChange, onSearch, onClear, placeholder, label, query, }) => {
    return (React.createElement(SearchField$1, { label: label, size: "small", clearButtonLabel: "Clear search", placeholder: placeholder, value: query, onChange: (e) => {
            onQueryChange?.(e.target.value);
        }, onSubmit: () => {
            onSearch?.();
        }, onClear: () => {
            onClear?.();
        } }));
};
const Navigation = ({ items }) => {
    return (React.createElement(Breadcrumbs.Container, null, items.map((item, i) => {
        return (React.createElement(Breadcrumbs.Item, { key: i },
            React.createElement(Breadcrumbs.Link, { as: item.isCurrent ? 'span' : 'button', isCurrent: item.isCurrent, onClick: item.onNavigate }, item.name),
            item.isCurrent ? null : React.createElement(Breadcrumbs.Separator, null)));
    })));
};
const LoadingIndicator = ({ isLoading, }) => {
    if (isLoading) {
        return (React.createElement(Loader, { className: "amplify-storage-browser__loader", variation: "linear", size: "small" }));
    }
};
const FolderNameField = ({ onChange, label, placeholder, validationMessage, onValidate, }) => {
    const handleValidate = ({ target: { value }, }) => {
        onValidate?.(value);
    };
    return (React.createElement(TextField, { label: label, placeholder: placeholder, errorMessage: validationMessage, hasError: !!validationMessage, onBlur: handleValidate, onChange: (event) => {
            const { value } = event.target;
            handleValidate?.(event);
            onChange?.(value);
        } }));
};
const DataRefresh = ({ onRefresh, }) => {
    return (React.createElement(Button, { onClick: () => {
            onRefresh?.();
        }, "aria-label": "Refresh data" },
        React.createElement(IconElement, { className: "amplify-icon", variant: "refresh" })));
};
const ActionsList = ({ items, onActionSelect, isDisabled, }) => {
    return (React.createElement(Menu, { isDisabled: isDisabled, trigger: React.createElement(Button, { ariaLabel: "Menu Toggle" },
            React.createElement(IconElement, { className: "amplify-icon", variant: "menu" })) }, items
        .filter(({ isHidden }) => !isHidden)
        .map(({ actionType, icon, label, isDisabled }, i) => {
        return (React.createElement(MenuItem, { key: i, size: "small", gap: "xs", isDisabled: isDisabled, onClick: () => {
                onActionSelect?.(actionType);
            } },
            icon && React.createElement(IconElement, { variant: icon }),
            label));
    })));
};
const StatusDisplay = ({ statuses, total, }) => {
    if (!statuses?.length) {
        return null;
    }
    return (React.createElement(View, { as: "dl", className: `${STORAGE_BROWSER_BLOCK}__status-display` }, statuses.map(({ name, count }, i) => (React.createElement(View, { as: "div", className: `${STORAGE_BROWSER_BLOCK}__status`, key: i },
        React.createElement(View, { as: "dt", className: `${STORAGE_BROWSER_BLOCK}__status-label` }, name),
        React.createElement(View, { as: "dd", className: `${STORAGE_BROWSER_BLOCK}__status-value` }, `${count}/${total}`))))));
};
const ActionDestination = ({ isNavigable, items, label, }) => {
    if (!items.length) {
        return null;
    }
    return (React.createElement(View, { as: "dl", className: `${STORAGE_BROWSER_BLOCK}__destination` },
        React.createElement(View, { as: "dt", className: `${STORAGE_BROWSER_BLOCK}__destination-label` }, label),
        React.createElement(View, { as: "dd", className: `${STORAGE_BROWSER_BLOCK}__destination-value` },
            React.createElement(Breadcrumbs.Container, null, items.map((item, i) => {
                return (React.createElement(Breadcrumbs.Item, { key: i },
                    isNavigable ? (React.createElement(Breadcrumbs.Link, { as: item.isCurrent ? 'span' : 'button', isCurrent: item.isCurrent, onClick: item.onNavigate }, item.name)) : (item.name),
                    item.isCurrent ? null : React.createElement(Breadcrumbs.Separator, null)));
            })))));
};
const Title = ({ title }) => {
    return (React.createElement(Heading, { className: `${STORAGE_BROWSER_BLOCK}__title`, level: 2 }, title));
};
const componentsDefault = {
    ActionDestination,
    ActionsList,
    DataRefresh,
    LoadingIndicator,
    Pagination,
    Navigation,
    OverwriteToggle,
    SearchField,
    SearchSubfoldersToggle,
    StatusDisplay,
    FolderNameField,
    Title,
};

export { componentsDefault };
