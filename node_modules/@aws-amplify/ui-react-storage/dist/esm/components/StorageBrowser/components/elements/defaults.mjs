import React__default from 'react';
import { View as View$1, Message, Flex, Text as Text$1, TableRow as TableRow$1, TableCell, TableHead as TableHead$1, TableBody as TableBody$1, Table as Table$1, Heading as Heading$1, Label as Label$1, Input as Input$1, Button as Button$1 } from '@aws-amplify/ui-react';

function Button(props) {
    const { disabled, variant } = props;
    switch (variant) {
        case 'menu-item':
            return (React__default.createElement(Button$1, { ...props, variation: "link", size: "small", borderRadius: "0", justifyContent: "flex-start" }));
        case 'cancel':
            return (React__default.createElement(Button$1, { ...props, size: "small", variation: "link", colorTheme: "error" }));
        case 'primary':
            return (React__default.createElement(Button$1, { ...props, isDisabled: disabled, size: "small", variation: "primary" }));
        case 'exit':
            return (React__default.createElement(Button$1, { ...props, size: "small", paddingInline: "xs", variation: "link" }));
        case 'message-dismiss':
            return (React__default.createElement(Button$1, { ...props, size: "small", variation: "link", colorTheme: "overlay" }));
        case 'navigate':
        case 'paginate-current':
        case 'paginate-next':
        case 'paginate-previous':
            return (React__default.createElement(Button$1, { ...props, size: "small", paddingInline: "xs", variation: "link" }));
        case 'menu-toggle':
        case 'download':
        case 'refresh':
        case 'sort':
            return React__default.createElement(Button$1, { ...props, size: "small", variation: "link" });
        case 'table-data':
            return (React__default.createElement(Button$1, { ...props, variation: "link", size: "small", textDecoration: "underline" }));
        default:
            return React__default.createElement(Button$1, { ...props, size: "small" });
    }
}
function DescriptionTerm(props) {
    return React__default.createElement(View$1, { ...props, as: "dt", fontWeight: "bold" });
}
function Label(props) {
    const { children } = props;
    return React__default.createElement(Label$1, { ...props }, children);
}
function Input(props) {
    const { type } = props;
    if (type === 'checkbox') {
        return React__default.createElement("input", { ...props });
    }
    return React__default.createElement(Input$1, { ...props });
}
function Heading(props) {
    return (React__default.createElement(Heading$1, { ...props, level: 2, fontSize: "large", fontWeight: "bold", alignSelf: "center" }));
}
function Span(props) {
    const { variant } = props;
    if (variant === 'navigation-text' || variant === 'destination-text') {
        return (React__default.createElement(View$1, { ...props, as: "span", padding: "xs", color: "font.secondary", fontSize: "small" }));
    }
    return React__default.createElement(View$1, { ...props, as: "span" });
}
function Table(props) {
    return (React__default.createElement(Table$1, { ...props, size: "small", lineHeight: "small", variation: "striped" }));
}
function TableBody(props) {
    return React__default.createElement(TableBody$1, { ...props });
}
function TableHead(props) {
    return React__default.createElement(TableHead$1, { ...props });
}
function TableDataCell(props) {
    return React__default.createElement(TableCell, { ...props });
}
function TableRow(props) {
    return React__default.createElement(TableRow$1, { ...props });
}
function TableHeader(props) {
    return React__default.createElement(TableCell, { as: "th", ...props });
}
function Text(props) {
    const { variant } = props;
    switch (variant) {
        case 'field-error':
            return React__default.createElement(Text$1, { ...props, color: "font.error", margin: "0" });
        default:
            return React__default.createElement(Text$1, { ...props });
    }
}
function View({ variant, ...props }) {
    switch (variant) {
        case 'menu-list':
            return (React__default.createElement(View$1, { ...props, marginTop: "2px", borderRadius: "medium", boxShadow: "0 1px 3px hsla(210, 50%, 10%, 0.25)", backgroundColor: "background.primary", padding: "small" }));
        case 'info':
        case 'warning':
        case 'success':
        case 'error':
            return (React__default.createElement(Message, { ...props, hasIcon: false, colorTheme: variant },
                React__default.createElement(Flex, { gap: "small", alignItems: "center" }, props.children)));
        case 'empty-message':
            return (React__default.createElement(Message, { ...props, colorTheme: "neutral" },
                React__default.createElement(Flex, { justifyContent: "center" }, props.children)));
        default:
            return React__default.createElement(View$1, { ...props });
    }
}
const Nav = (props) => (React__default.createElement(View$1, { ...props, as: "nav" }));
const elementsDefault = {
    Button,
    DescriptionTerm,
    Input,
    Label,
    Nav,
    Heading,
    Span,
    Table,
    TableBody,
    TableDataCell,
    TableHead,
    TableHeader,
    TableRow,
    Text,
    View,
};

export { elementsDefault };
