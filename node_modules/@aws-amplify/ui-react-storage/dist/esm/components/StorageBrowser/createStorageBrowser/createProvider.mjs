import React__default from 'react';
import '@aws-amplify/storage/internals';
import '@aws-amplify/ui';
import 'aws-amplify/storage';
import { ActionConfigsProvider } from '../actions/configs/context.mjs';
import { defaultActionConfigs } from '../actions/configs/defaults.mjs';
import { getActionConfigs } from '../actions/configs/utils.mjs';
import '@aws-amplify/ui-react';
import '../components/elements/definitions.mjs';
import '../components/elements/IconElement.mjs';
import '../components/composables/context.mjs';
import { DEFAULT_COMPOSABLES } from '../components/composables/defaults.mjs';
import { ComponentsProvider } from '../components/ComponentsProvider.mjs';
import { componentsDefault } from '../components/defaults.mjs';
import { createConfigurationProvider } from '../configuration/createConfigurationProvider.mjs';
import '../configuration/context.mjs';
import { DisplayTextProvider } from '../displayText/context.mjs';
import { FilesProvider } from '../files/context.mjs';
import { LocationItemsProvider } from '../locationItems/context.mjs';
import { StoreProvider } from '../store/context.mjs';
import { ActionHandlersProvider } from '../useAction/context.mjs';
import '@aws-amplify/ui-react-core';
import { getActionHandlers } from '../useAction/utils.mjs';
import { ViewsProvider } from '../views/context/views.mjs';
import '../views/LocationActionView/CopyView/CopyView.mjs';
import '../views/LocationActionView/CreateFolderView/CreateFolderView.mjs';
import '../views/LocationActionView/DeleteView/DeleteView.mjs';
import '../views/context/actionViews.mjs';
import '../views/LocationActionView/UploadView/UploadView.mjs';
import '../views/LocationDetailView/LocationDetailView.mjs';
import '../views/LocationsView/LocationsView.mjs';

function createProvider({ actions, components, config, }) {
    const { accountId, customEndpoint, registerAuthListener, getLocationCredentials, region, listLocations, } = config;
    const resolvedActions = {
        default: {
            ...defaultActionConfigs,
            ...actions?.default,
            // always last
            listLocations,
        },
        custom: actions?.custom,
    };
    const handlers = getActionHandlers(resolvedActions);
    const actionConfigs = getActionConfigs(resolvedActions);
    const ConfigurationProvider = createConfigurationProvider({
        accountId,
        customEndpoint,
        displayName: 'ConfigurationProvider',
        getLocationCredentials,
        region,
        registerAuthListener,
    });
    const composables = {
        // fallback composables
        ...DEFAULT_COMPOSABLES,
        // default components
        ...componentsDefault,
        // override components
        ...components,
    };
    /**
     * Provides state, configuration and action values that are shared between
     * the primary View components
     */
    function Provider({ children, displayText, views, ...props }) {
        return (React__default.createElement(StoreProvider, { ...props },
            React__default.createElement(ConfigurationProvider, null,
                React__default.createElement(ActionConfigsProvider, { actionConfigs: actionConfigs },
                    React__default.createElement(ActionHandlersProvider, { handlers: handlers },
                        React__default.createElement(DisplayTextProvider, { displayText: displayText },
                            React__default.createElement(ViewsProvider, { actions: resolvedActions, views: views },
                                React__default.createElement(ComponentsProvider, { composables: composables },
                                    React__default.createElement(LocationItemsProvider, null,
                                        React__default.createElement(FilesProvider, null, children))))))))));
    }
    return Provider;
}

export { createProvider as default };
