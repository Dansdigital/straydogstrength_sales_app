import { listPaths } from '@aws-amplify/storage/internals';
import { parseAmplifyAuthPermission } from '../permissionParsers.mjs';
import { getPaginatedLocations } from './getPaginatedLocations.mjs';

const createAmplifyListLocationsHandler = () => {
    let cachedItems = [];
    return async function listLocations(input) {
        const { options } = input ?? {};
        const { nextToken, pageSize } = options ?? {};
        if (cachedItems.length > 0) {
            return getPaginatedLocations({
                items: cachedItems,
                pageSize,
                nextToken,
            });
        }
        const { locations } = await listPaths();
        const sanitizedItems = locations.map(({ bucket, permission, prefix, type }) => {
            return {
                type,
                permissions: parseAmplifyAuthPermission(permission),
                bucket,
                prefix: prefix.endsWith('*') ? prefix.slice(0, -1) : prefix,
                id: crypto.randomUUID(),
            };
        });
        cachedItems = sanitizedItems;
        return getPaginatedLocations({
            items: cachedItems,
            pageSize,
            nextToken,
        });
    };
};

export { createAmplifyListLocationsHandler };
