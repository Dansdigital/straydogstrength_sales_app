import { isUndefined, isString, isEmpty } from '@aws-amplify/ui';

const compareFileItems = (prev, next) => prev.key.localeCompare(next.key);
const resolveFiles = (prevItems, files) => {
    if (!files?.length)
        return prevItems;
    // construct `nextItems` and filter out existing `file` entries
    const nextItems = files.reduce((items, file) => {
        const { name, webkitRelativePath } = file;
        return prevItems.some(({ file: existing }) => existing.name === name &&
            existing.webkitRelativePath === webkitRelativePath)
            ? items
            : items.concat({
                key: isEmpty(webkitRelativePath) ? name : webkitRelativePath,
                id: crypto.randomUUID(),
                file,
            });
    }, []);
    if (!nextItems.length)
        return prevItems;
    if (!prevItems.length) {
        return nextItems.sort(compareFileItems);
    }
    return prevItems.concat(nextItems).sort(compareFileItems);
};
const filesReducer = (prevItems, input) => {
    switch (input.type) {
        case 'ADD_FILE_ITEMS': {
            return resolveFiles(prevItems, input.files);
        }
        case 'REMOVE_FILE_ITEM': {
            const filteredItems = prevItems.filter(({ id }) => id !== input.id);
            return filteredItems.length === prevItems.length
                ? prevItems
                : filteredItems;
        }
        case 'RESET_FILE_ITEMS': {
            return [];
        }
        // TODO: clear message
    }
};
const parseFileSelectParams = (value) => {
    if (isUndefined(value))
        return ['FILE', undefined];
    if (isString(value))
        return [value, undefined];
    const [selectType, ...rest] = value;
    return [selectType, !rest?.length ? undefined : { accept: rest.join() }];
};

export { filesReducer, parseFileSelectParams, resolveFiles };
