import { isCancelError } from 'aws-amplify/storage';
import { isFunction } from '@aws-amplify/ui';
import { uploadData } from '@aws-amplify/storage/internals';
import { constructBucket, isMultipartUpload, getProgress } from './utils.mjs';
import { DEFAULT_CHECKSUM_ALGORITHM } from './constants.mjs';

const UNDEFINED_CALLBACKS = {
    cancel: undefined,
    pause: undefined,
    resume: undefined,
};
const uploadHandler = ({ config, data, options }) => {
    const { accountId, credentials, customEndpoint } = config;
    const { key, file, preventOverwrite } = data;
    const { onProgress } = options ?? {};
    const input = {
        path: key,
        data: file,
        options: {
            bucket: constructBucket(config),
            expectedBucketOwner: accountId,
            locationCredentialsProvider: credentials,
            onProgress: (event) => {
                if (isFunction(onProgress))
                    onProgress(data, getProgress(event));
            },
            preventOverwrite,
            customEndpoint,
            checksumAlgorithm: DEFAULT_CHECKSUM_ALGORITHM,
        },
    };
    const { cancel, pause, resume, result } = uploadData(input);
    return {
        ...(isMultipartUpload(file)
            ? { cancel, pause, resume }
            : UNDEFINED_CALLBACKS),
        result: result
            .then((output) => ({
            status: 'COMPLETE',
            value: { key: output.path },
        }))
            .catch((error) => {
            const { message } = error;
            if (error.name === 'PreconditionFailed') {
                return { error, message, status: 'OVERWRITE_PREVENTED' };
            }
            const status = isCancelError(error) ? 'CANCELED' : 'FAILED';
            return { error, message, status };
        }),
    };
};

export { UNDEFINED_CALLBACKS, uploadHandler };
