import React__default from 'react';
import { useControlsContext } from '../context.mjs';
import { compareButtonData } from './compareFunctions/compareButtonData.mjs';
import { compareDateData } from './compareFunctions/compareDateData.mjs';
import { compareNumberData } from './compareFunctions/compareNumberData.mjs';
import { compareTextData } from './compareFunctions/compareTextData.mjs';

const GROUP_ORDER = [
    'checkbox',
    'button',
    'date',
    'number',
    'text',
];
const UNSORTABLE_GROUPS = ['checkbox'];
const useDataTable = () => {
    const { data } = useControlsContext();
    const { isLoading, tableData } = data;
    const defaultSortIndex = React__default.useMemo(() => tableData?.headers?.findIndex(({ type }) => type === 'sort') ?? -1, [tableData]);
    const [sortState, setSortState] = React__default.useState({
        index: defaultSortIndex,
        direction: 'ascending',
    });
    const mappedHeaders = React__default.useMemo(() => tableData?.headers.map((header, index) => {
        const { type } = header;
        switch (type) {
            case 'sort': {
                return {
                    ...header,
                    content: {
                        ...header.content,
                        onSort: () => {
                            setSortState({
                                index,
                                direction: sortState.index === index
                                    ? sortState.direction === 'ascending'
                                        ? 'descending'
                                        : 'ascending'
                                    : 'ascending',
                            });
                        },
                        sortDirection: sortState.index === index ? sortState.direction : undefined,
                    },
                };
            }
            case 'checkbox':
            case 'text':
            default: {
                return header;
            }
        }
    }), [sortState, tableData]);
    const sortedRows = React__default.useMemo(() => {
        // Early return if there is no table data
        if (!tableData) {
            return;
        }
        // Return rows as is if there are no sortable columns
        if (sortState.index < 0) {
            return tableData.rows;
        }
        const { index, direction } = sortState;
        const groupedRows = {
            button: [],
            checkbox: [],
            date: [],
            number: [],
            text: [],
        };
        tableData.rows.forEach((row) => {
            const { type } = row.content[index];
            groupedRows[type].push(row);
        });
        const groupOrder = direction === 'ascending' ? GROUP_ORDER : [...GROUP_ORDER].reverse();
        return groupOrder
            .map((groupType) => {
            if (UNSORTABLE_GROUPS.includes(groupType)) {
                return groupedRows[groupType];
            }
            return groupedRows[groupType].sort((rowA, rowB) => {
                switch (groupType) {
                    case 'button': {
                        return compareButtonData(rowA.content[index], rowB.content[index], direction);
                    }
                    case 'date': {
                        return compareDateData(rowA.content[index], rowB.content[index], direction);
                    }
                    case 'number': {
                        return compareNumberData(rowA.content[index], rowB.content[index], direction);
                    }
                    case 'text':
                    default: {
                        return compareTextData(rowA.content[index], rowB.content[index], direction);
                    }
                }
            });
        })
            .flat();
    }, [sortState, tableData]);
    return {
        headers: mappedHeaders ?? [],
        isLoading,
        rows: sortedRows ?? [],
    };
};

export { useDataTable };
