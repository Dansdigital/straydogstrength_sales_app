'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var internals = require('@aws-amplify/storage/internals');
require('@aws-amplify/ui');
var createStorageBrowser = require('./createStorageBrowser-B75dAYRb.js');
require('aws-amplify/storage');
require('react');
require('@aws-amplify/ui-react');
require('@aws-amplify/ui-react-core');
require('@aws-amplify/ui-react-core/elements');
require('aws-amplify');
require('aws-amplify/auth');
require('aws-amplify/utils');
require('@aws-amplify/ui-react/internal');

const createLocationCredentialsHandler = (handlerInput) => {
    const { accountId, region, credentialsProvider, customEndpoint } = handlerInput;
    /**
     * Retrieves credentials for the specified scope & permission.
     *
     * @param input - An object specifying the requested scope & permission.
     *
     * @returns A promise which will resolve with the requested credentials.
     */
    return (input) => {
        const { scope, permissions } = input;
        return internals.getDataAccess({
            accountId,
            credentialsProvider,
            permission: createStorageBrowser.toAccessGrantPermission(permissions),
            region,
            scope,
            customEndpoint,
        });
    };
};

function assertAccountId(value) {
    if (!value) {
        throw new Error('Storage Browser: Must provide accountId to `listCallerAccessGrants`.');
    }
}

const DEFAULT_PAGE_SIZE = 1000;
const listLocationsHandler = async (input) => {
    const { config, options } = input;
    const { accountId, credentials, customEndpoint, region } = config;
    const { exclude, nextToken, pageSize = DEFAULT_PAGE_SIZE } = options ?? {};
    const fetchLocations = async (accumulatedItems, locationsNextToken) => {
        const remainingPageSize = pageSize - accumulatedItems.length;
        assertAccountId(accountId);
        const output = await internals.listCallerAccessGrants({
            accountId,
            credentialsProvider: credentials,
            customEndpoint,
            nextToken: locationsNextToken,
            pageSize: remainingPageSize,
            region,
        });
        const parsedOutput = createStorageBrowser.getFilteredLocations(output.locations, exclude);
        const items = [...accumulatedItems, ...parsedOutput];
        if (output.nextToken && items.length < pageSize) {
            return fetchLocations(items, output.nextToken);
        }
        return { items, nextToken: output.nextToken };
    };
    return fetchLocations([], nextToken);
};

/**
 * Create configuration including handlers to call S3 Access Grant APIs to list and get
 * credentials for different locations.
 *
 * @param options - Configuration options for the adapter.
 * @returns - An object containing the handlers to call S3 Access Grant APIs and region
 */
const createManagedAuthAdapter = ({ accountId, credentialsProvider, customEndpoint, region, registerAuthListener, }) => {
    const config = {
        accountId,
        credentials: credentialsProvider,
        customEndpoint,
        region,
    };
    const listLocations = ({ options } = {}) => listLocationsHandler({ config, options });
    const getLocationCredentials = createLocationCredentialsHandler({
        credentialsProvider,
        accountId,
        customEndpoint,
        region,
    });
    return {
        accountId,
        listLocations,
        getLocationCredentials,
        region,
        registerAuthListener,
    };
};

exports.DefaultStorageBrowserDisplayText = createStorageBrowser.DEFAULT_STORAGE_BROWSER_DISPLAY_TEXT;
exports.componentsDefault = createStorageBrowser.componentsDefault;
exports.createAmplifyAuthAdapter = createStorageBrowser.createAmplifyAuthAdapter;
exports.createStorageBrowser = createStorageBrowser.createStorageBrowser;
exports.defaultActionConfigs = createStorageBrowser.defaultActionConfigs;
exports.defaultHandlers = createStorageBrowser.defaultHandlers;
exports.createManagedAuthAdapter = createManagedAuthAdapter;
