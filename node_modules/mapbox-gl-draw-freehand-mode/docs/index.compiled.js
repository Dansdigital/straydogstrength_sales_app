(()=>{var e={149:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>I});const r="add",n="polygon",i="Feature",a="Polygon",s="simple_select",u="vertex",c="true",l="false";function p(e){const t=e.featureTarget;return!!t&&!!t.properties&&t.properties.meta===u}const g={enable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()}),0)},disable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()}),0)}};function d(e,t,o,r){return{type:i,properties:{meta:u,parent:e,coord_path:o,active:r?c:l},geometry:{type:"Point",coordinates:t}}}const y={onSetup:function(){const e=this.newFeature({type:i,properties:{},geometry:{type:a,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),g.disable(this),this.updateUIClasses({mouse:r}),this.activateUIButton(n),this.setActionableState({trash:!0}),{polygon:e,currentVertexPosition:0}},clickAnywhere:function(e,t){if(e.currentVertexPosition>0&&(o=t,n=e.polygon.coordinates[0][e.currentVertexPosition-1],o.lngLat&&o.lngLat.lng===n[0]&&o.lngLat.lat===n[1]))return this.changeMode(s,{featureIds:[e.polygon.id]});var o,n;this.updateUIClasses({mouse:r}),e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat)},clickOnVertex:function(e){return this.changeMode(s,{featureIds:[e.polygon.id]})},onMouseMove:function(e,t){e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),p(t)&&this.updateUIClasses({mouse:"pointer"})}};y.onTap=y.onClick=function(e,t){return p(t)?this.clickOnVertex(e,t):this.clickAnywhere(e,t)},y.onKeyUp=function(e,t){!function(e){return 27===e.keyCode}(t)?function(e){return 13===e.keyCode}(t)&&this.changeMode(s,{featureIds:[e.polygon.id]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(s))},y.onStop=function(e){this.updateUIClasses({mouse:"none"}),g.enable(this),this.activateUIButton(),void 0!==this.getFeature(e.polygon.id)&&(e.polygon.removeCoordinate(`0.${e.currentVertexPosition}`),e.polygon.isValid()?this.map.fire("draw.create",{features:[e.polygon.toGeoJSON()]}):(this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(s,{},{silent:!0})))},y.toDisplayFeatures=function(e,t,o){const r=t.properties.id===e.polygon.id;if(t.properties.active=r?c:l,!r)return o(t);if(0===t.geometry.coordinates.length)return;const n=t.geometry.coordinates[0].length;if(!(n<3)){if(t.properties.meta="feature",o(d(e.polygon.id,t.geometry.coordinates[0][0],"0.0",!1)),n>3){const r=t.geometry.coordinates[0].length-3;o(d(e.polygon.id,t.geometry.coordinates[0][r],`0.${r}`,!1))}if(n<=4){const e=[[t.geometry.coordinates[0][0][0],t.geometry.coordinates[0][0][1]],[t.geometry.coordinates[0][1][0],t.geometry.coordinates[0][1][1]]];if(o({type:i,properties:t.properties,geometry:{coordinates:e,type:"LineString"}}),3===n)return}return o(t)}},y.onTrash=function(e){this.deleteFeature([e.polygon.id],{silent:!0}),this.changeMode(s)};const f=y;function h(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function m(e){var t=h(e);if(2===t.length&&!b(t[0],t[1]))return t;var o=[],r=t.length-1,n=o.length;o.push(t[0]);for(var i=1;i<r;i++){var a=o[o.length-1];t[i][0]===a[0]&&t[i][1]===a[1]||(o.push(t[i]),(n=o.length)>2&&v(o[n-3],o[n-1],o[n-2])&&o.splice(o.length-2,1))}if(o.push(t[t.length-1]),n=o.length,b(t[0],t[t.length-1])&&n<4)throw new Error("invalid polygon");return v(o[n-3],o[n-1],o[n-2])&&o.splice(o.length-2,1),o}function b(e,t){return e[0]===t[0]&&e[1]===t[1]}function v(e,t,o){var r=o[0],n=o[1],i=e[0],a=e[1],s=t[0],u=t[1],c=s-i,l=u-a;return 0==(r-i)*l-(n-a)*c&&(Math.abs(c)>=Math.abs(l)?c>0?i<=r&&r<=s:s<=r&&r<=i:l>0?a<=n&&n<=u:u<=n&&n<=a)}function x(e){var t={type:"Feature"};return Object.keys(e).forEach((function(o){switch(o){case"type":case"properties":case"geometry":return;default:t[o]=e[o]}})),t.properties=w(e.properties),t.geometry=P(e.geometry),t}function w(e){var t={};return e?(Object.keys(e).forEach((function(o){var r=e[o];"object"==typeof r?null===r?t[o]=null:Array.isArray(r)?t[o]=r.map((function(e){return e})):t[o]=w(r):t[o]=r})),t):t}function P(e){var t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map((function(e){return P(e)})),t):(t.coordinates=M(e.coordinates),t)}function M(e){var t=e;return"object"!=typeof t[0]?t.slice():t.map((function(e){return M(e)}))}function C(e,t,o){var r=t.x,n=t.y,i=o.x-r,a=o.y-n;if(0!==i||0!==a){var s=((e.x-r)*i+(e.y-n)*a)/(i*i+a*a);s>1?(r=o.x,n=o.y):s>0&&(r+=i*s,n+=a*s)}return(i=e.x-r)*i+(a=e.y-n)*a}function S(e,t,o,r,n){for(var i,a=r,s=t+1;s<o;s++){var u=C(e[s],e[t],e[o]);u>a&&(i=s,a=u)}a>r&&(i-t>1&&S(e,t,i,r,n),n.push(e[i]),o-i>1&&S(e,i,o,r,n))}function k(e,t){var o=e.length-1,r=[e[0]];return S(e,0,o,t,r),r.push(e[o]),r}function F(e,t,o){if(e.length<=2)return e;var r=void 0!==t?t*t:1;return k(e=o?e:function(e,t){for(var o,r,n,i,a,s=e[0],u=[s],c=1,l=e.length;c<l;c++)n=s,void 0,void 0,(i=(r=o=e[c]).x-n.x)*i+(a=r.y-n.y)*a>t&&(u.push(o),s=o);return s!==o&&u.push(o),u}(e,r),r)}function L(e,t,o){return F(e.map((function(e){return{x:e[0],y:e[1],z:e[2]}})),t,o).map((function(e){return e.z?[e.x,e.y,e.z]:[e.x,e.y]}))}function j(e,t,o){return e.map((function(e){var r=e.map((function(e){return{x:e[0],y:e[1]}}));if(r.length<4)throw new Error("invalid polygon");for(var n=F(r,t,o).map((function(e){return[e.x,e.y]}));!E(n);)n=F(r,t-=.01*t,o).map((function(e){return[e.x,e.y]}));return n[n.length-1][0]===n[0][0]&&n[n.length-1][1]===n[0][1]||n.push(n[0]),n}))}function E(e){return!(e.length<3||3===e.length&&e[2][0]===e[0][0]&&e[2][1]===e[0][1])}const O=function(e,t){if(!(o=t=t||{})||o.constructor!==Object)throw new Error("options is invalid");var o,r=void 0!==t.tolerance?t.tolerance:1,n=t.highQuality||!1,i=t.mutate||!1;if(!e)throw new Error("geojson is required");if(r&&r<0)throw new Error("invalid tolerance");return!0!==i&&(e=function(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return x(e);case"FeatureCollection":return function(e){var t={type:"FeatureCollection"};return Object.keys(e).forEach((function(o){switch(o){case"type":case"features":return;default:t[o]=e[o]}})),t.features=e.features.map((function(e){return x(e)})),t}(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return P(e);default:throw new Error("unknown GeoJSON type")}}(e)),function(e,t){var o,r,n,i,a,s,u,c,l,p,g=0,d="FeatureCollection"===e.type,y="Feature"===e.type,f=d?e.features.length:1;for(o=0;o<f;o++){for(s=d?e.features[o].geometry:y?e.geometry:e,c=d?e.features[o].properties:y?e.properties:{},l=d?e.features[o].bbox:y?e.bbox:void 0,p=d?e.features[o].id:y?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,n=0;n<a;n++)if(null!==(i=u?s.geometries[n]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,g,c,l,p))return!1;break;case"GeometryCollection":for(r=0;r<i.geometries.length;r++)if(!1===t(i.geometries[r],g,c,l,p))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,g,c,l,p))return!1;g++}}(e,(function(e){!function(e,t,o){var r=e.type;if("Point"===r||"MultiPoint"===r)return e;!function(e,t){void 0===t&&(t={});var o="object"==typeof t?t.mutate:t;if(!e)throw new Error("geojson is required");var r=function(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}(e),n=[];switch(r){case"LineString":n=m(e);break;case"MultiLineString":case"Polygon":h(e).forEach((function(e){n.push(m(e))}));break;case"MultiPolygon":h(e).forEach((function(e){var t=[];e.forEach((function(e){t.push(m(e))})),n.push(t)}));break;case"Point":return e;case"MultiPoint":var i={};h(e).forEach((function(e){var t=e.join("-");i.hasOwnProperty(t)||(n.push(e),i[t]=!0)}));break;default:throw new Error(r+" geometry not supported")}e.coordinates?!0===o&&(e.coordinates=n):!0===o?e.geometry.coordinates=n:function(e,t,o){void 0===o&&(o={});var r={type:"Feature"};(0===o.id||o.id)&&(r.id=o.id),o.bbox&&(r.bbox=o.bbox),r.properties=t||{},r.geometry=e}({type:r,coordinates:n},e.properties,{bbox:e.bbox,id:e.id})}(e,!0);var n=e.coordinates;switch(r){case"LineString":e.coordinates=L(n,t,o);break;case"MultiLineString":e.coordinates=n.map((function(e){return L(e,t,o)}));break;case"Polygon":e.coordinates=j(n,t,o);break;case"MultiPolygon":e.coordinates=n.map((function(e){return j(e,t,o)}))}}(e,r,n)})),e},V=Object.assign({},f);V.onSetup=function(){const e=this.newFeature({type:i,properties:{},geometry:{type:a,coordinates:[[]]}});return this.addFeature(e),this.clearSelectedFeatures(),setTimeout((()=>{this.map&&this.map.dragPan&&this.map.dragPan.disable()}),0),this.updateUIClasses({mouse:r}),this.activateUIButton(n),this.setActionableState({trash:!0}),{polygon:e,currentVertexPosition:0,dragMoving:!1}},V.onDrag=V.onTouchMove=function(e,t){e.dragMoving=!0,this.updateUIClasses({mouse:r}),e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat),e.currentVertexPosition++,e.polygon.updateCoordinate(`0.${e.currentVertexPosition}`,t.lngLat.lng,t.lngLat.lat)},V.onMouseUp=function(e,t){e.dragMoving&&(this.simplify(e.polygon),this.fireUpdate(),this.changeMode(s,{featureIds:[e.polygon.id]}))},V.onTouchEnd=function(e,t){this.onMouseUp(e,t)},V.fireUpdate=function(){this.map.fire("draw.update",{action:"move",features:this.getSelected().map((e=>e.toGeoJSON()))})},V.simplify=function(e){const t=1/Math.pow(1.05,10*this.map.getZoom());O(e,{mutate:!0,tolerance:t,highQuality:!0})};const I=V}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,o),i.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=o(149);mapboxgl.accessToken="pk.eyJ1IjoiYmVuZWhta2UiLCJhIjoiY2plYTl6b3c2MHg5ODJxbGV4aXR4Z3p6YSJ9.d3jSAbsqSmpJwyVcp9iXbw";var t=new mapboxgl.Map({container:document.getElementById("map"),style:"mapbox://styles/mapbox/streets-v11",center:[-94.737236,32.514885],zoom:12}),r=new MapboxDraw({modes:Object.assign(MapboxDraw.modes,{draw_polygon:e})});t.addControl(r,"top-left"),t.on("draw.create",(function(){console.log(arguments,r.getAll())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,