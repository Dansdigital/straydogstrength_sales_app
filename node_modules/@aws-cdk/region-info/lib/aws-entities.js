"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AWS_REGIONS = exports.AWS_REGIONS_AND_RULES = exports.RULE_CLASSIC_PARTITION_BECOMES_OPT_IN = exports.RULE_S3_WEBSITE_REGIONAL_SUBDOMAIN = void 0;
exports.before = before;
exports.regionsBefore = regionsBefore;
exports.partitionInformation = partitionInformation;
/**
 * After this point, S3 website domains look like `s3-website.REGION.s3.amazonaws.com`
 *
 * Before this point, S3 website domains look like `s3-website-REGION.s3.amazonaws.com`.
 */
exports.RULE_S3_WEBSITE_REGIONAL_SUBDOMAIN = Symbol('S3_WEBSITE_REGIONAL_SUBDOMAIN');
/**
 * After this point, all regions in the 'aws' partition are opt-in.
 */
exports.RULE_CLASSIC_PARTITION_BECOMES_OPT_IN = Symbol('CLASSIC_PARTITION_BECOMES_OPT_IN');
/**
 * List of AWS region, ordered by launch date (oldest to newest)
 *
 * The significance of this is that standards and conventions change over time.
 * Generally, as rules are changed they only apply to new regions, and old
 * regions are left as-is.
 *
 * We mix the list of regions with a list of rules that were introduced over
 * time (rules are symbols).
 *
 * Therefore, if we want to know if a rule applies to a certain region, we
 * only need to check its position in the list and compare it to when a
 * rule was introduced.
 */
exports.AWS_REGIONS_AND_RULES = [
    'us-east-1', // US East (N. Virginia)
    'eu-west-1', // Europe (Ireland)
    'us-west-1', // US West (N. California)
    'ap-southeast-1', // Asia Pacific (Singapore)
    'ap-northeast-1', // Asia Pacific (Tokyo)
    'us-gov-west-1', // AWS GovCloud (US-West)
    'us-west-2', // US West (Oregon)
    'sa-east-1', // South America (SÃ£o Paulo)
    'ap-southeast-2', // Asia Pacific (Sydney)
    exports.RULE_S3_WEBSITE_REGIONAL_SUBDOMAIN,
    'cn-north-1', // China (Beijing)
    'us-iso-east-1', // AWS ISO
    'eu-central-1', // Europe (Frankfurt)
    'ap-northeast-2', // Asia Pacific (Seoul)
    'ap-south-1', // Asia Pacific (Mumbai)
    'us-east-2', // US East (Ohio)
    'ca-central-1', // Canada (Central)
    'eu-west-2', // Europe (London)
    'us-isob-east-1', // AWS ISO-B
    'cn-northwest-1', // China (Ningxia)
    'eu-west-3', // Europe (Paris)
    'ap-northeast-3', // Asia Pacific (Osaka)
    'us-gov-east-1', // AWS GovCloud (US-East)
    'eu-north-1', // Europe (Stockholm)
    exports.RULE_CLASSIC_PARTITION_BECOMES_OPT_IN,
    'ap-east-1', // Asia Pacific (Hong Kong)
    'me-south-1', // Middle East (Bahrain)
    'af-south-1', // Africa (Cape Town)
    'eu-south-1', // Europe (Milan)
    'us-iso-west-1', // US ISO West
    'ap-southeast-3', // Asia Pacific (Jakarta)
    'me-central-1', // Middle East (UAE)
    'eu-central-2', // Europe (Zurich)
    'eu-south-2', // Europe (Spain)
    'ap-south-2', // Asia Pacific (Hyderabad)
    'ap-southeast-4', // Asia Pacific (Melbourne)
    'il-central-1', // Israel (Tel Aviv)
    'ca-west-1', // Canada West (Calgary)
    'ap-southeast-5', // Asia Pacific (Malaysia)
    'ap-southeast-7', // Asia Pacific (Thailand)
    'mx-central-1', // Mexico (Central)
    'eu-isoe-west-1', // EU ISO-E West
    'us-isob-west-1', // US ISOB West
    'ap-east-2', // Asia Pacific (Taipei)
];
/**
 * The names of all (known) AWS regions
 *
 * Not in the list ==> no built-in data for that region.
 */
exports.AWS_REGIONS = exports.AWS_REGIONS_AND_RULES
    .filter((x) => typeof x === 'string')
    .sort();
/**
 * Whether or not a region predates a given rule (or region).
 *
 * Unknown region => we have to assume no.
 */
function before(region, ruleOrRegion) {
    const ruleIx = exports.AWS_REGIONS_AND_RULES.indexOf(ruleOrRegion);
    if (ruleIx === -1) {
        throw new Error(`Unknown rule: ${String(ruleOrRegion)}`);
    }
    const regionIx = exports.AWS_REGIONS_AND_RULES.indexOf(region);
    return regionIx === -1 ? false : regionIx < ruleIx;
}
/**
 * Return all regions before a given rule was introduced (or region)
 */
function regionsBefore(ruleOrRegion) {
    const ruleIx = exports.AWS_REGIONS_AND_RULES.indexOf(ruleOrRegion);
    if (ruleIx === -1) {
        throw new Error(`Unknown rule: ${String(ruleOrRegion)}`);
    }
    return exports.AWS_REGIONS_AND_RULES.slice(0, ruleIx)
        .filter((entry) => typeof entry === 'string')
        .sort();
}
const PARTITION_MAP = {
    'default': { partition: 'aws', domainSuffix: 'amazonaws.com' },
    'cn-': { partition: 'aws-cn', domainSuffix: 'amazonaws.com.cn' },
    'us-gov-': { partition: 'aws-us-gov', domainSuffix: 'amazonaws.com' },
    'us-iso-': { partition: 'aws-iso', domainSuffix: 'c2s.ic.gov' },
    'us-isob-': { partition: 'aws-iso-b', domainSuffix: 'sc2s.sgov.gov' },
    'us-isof-': { partition: 'aws-iso-f', domainSuffix: 'csp.hci.ic.gov' },
    'eu-isoe-': { partition: 'aws-iso-e', domainSuffix: 'cloud.adc-e.uk' },
};
function partitionInformation(region) {
    for (const [prefix, info] of Object.entries(PARTITION_MAP)) {
        if (region.startsWith(prefix)) {
            return info;
        }
    }
    return PARTITION_MAP.default;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWVudGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXdzLWVudGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQXVGQSx3QkFPQztBQUtELHNDQVFDO0FBY0Qsb0RBT0M7QUFoSUQ7Ozs7R0FJRztBQUNVLFFBQUEsa0NBQWtDLEdBQUcsTUFBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFFMUY7O0dBRUc7QUFDVSxRQUFBLHFDQUFxQyxHQUFHLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBRWhHOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFDVSxRQUFBLHFCQUFxQixHQUFpQztJQUNqRSxXQUFXLEVBQUUsd0JBQXdCO0lBQ3JDLFdBQVcsRUFBRSxtQkFBbUI7SUFDaEMsV0FBVyxFQUFFLDBCQUEwQjtJQUN2QyxnQkFBZ0IsRUFBRSwyQkFBMkI7SUFDN0MsZ0JBQWdCLEVBQUUsdUJBQXVCO0lBQ3pDLGVBQWUsRUFBRSx5QkFBeUI7SUFDMUMsV0FBVyxFQUFFLG1CQUFtQjtJQUNoQyxXQUFXLEVBQUUsNEJBQTRCO0lBQ3pDLGdCQUFnQixFQUFFLHdCQUF3QjtJQUMxQywwQ0FBa0M7SUFDbEMsWUFBWSxFQUFFLGtCQUFrQjtJQUNoQyxlQUFlLEVBQUUsVUFBVTtJQUMzQixjQUFjLEVBQUUscUJBQXFCO0lBQ3JDLGdCQUFnQixFQUFFLHVCQUF1QjtJQUN6QyxZQUFZLEVBQUUsd0JBQXdCO0lBQ3RDLFdBQVcsRUFBRSxpQkFBaUI7SUFDOUIsY0FBYyxFQUFFLG1CQUFtQjtJQUNuQyxXQUFXLEVBQUUsa0JBQWtCO0lBQy9CLGdCQUFnQixFQUFFLFlBQVk7SUFDOUIsZ0JBQWdCLEVBQUUsa0JBQWtCO0lBQ3BDLFdBQVcsRUFBRSxpQkFBaUI7SUFDOUIsZ0JBQWdCLEVBQUUsdUJBQXVCO0lBQ3pDLGVBQWUsRUFBRSx5QkFBeUI7SUFDMUMsWUFBWSxFQUFFLHFCQUFxQjtJQUNuQyw2Q0FBcUM7SUFDckMsV0FBVyxFQUFFLDJCQUEy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TUFBYztJQUNqRCxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQzNELElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUM7QUFDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQWZ0ZXIgdGhpcyBwb2ludCwgUzMgd2Vic2l0ZSBkb21haW5zIGxvb2sgbGlrZSBgczMtd2Vic2l0ZS5SRUdJT04uczMuYW1hem9uYXdzLmNvbWBcbiAqXG4gKiBCZWZvcmUgdGhpcyBwb2ludCwgUzMgd2Vic2l0ZSBkb21haW5zIGxvb2sgbGlrZSBgczMtd2Vic2l0ZS1SRUdJT04uczMuYW1hem9uYXdzLmNvbWAuXG4gKi9cbmV4cG9ydCBjb25zdCBSVUxFX1MzX1dFQlNJVEVfUkVHSU9OQUxfU1VCRE9NQUlOID0gU3ltYm9sKCdTM19XRUJTSVRFX1JFR0lPTkFMX1NVQkRPTUFJTicpO1xuXG4vKipcbiAqIEFmdGVyIHRoaXMgcG9pbnQsIGFsbCByZWdpb25zIGluIHRoZSAnYXdzJyBwYXJ0aXRpb24gYXJlIG9wdC1pbi5cbiAqL1xuZXhwb3J0IGNvbnN0IFJVTEVfQ0xBU1NJQ19QQVJUSVRJT05fQkVDT01FU19PUFRfSU4gPSBTeW1ib2woJ0NMQVNTSUNfUEFSVElUSU9OX0JFQ09NRVNfT1BUX0lOJyk7XG5cbi8qKlxuICogTGlzdCBvZiBBV1MgcmVnaW9uLCBvcmRlcmVkIGJ5IGxhdW5jaCBkYXRlIChvbGRlc3QgdG8gbmV3ZXN0KVxuICpcbiAqIFRoZSBzaWduaWZpY2FuY2Ugb2YgdGhpcyBpcyB0aGF0IHN0YW5kYXJkcyBhbmQgY29udmVudGlvbnMgY2hhbmdlIG92ZXIgdGltZS5cbiAqIEdlbmVyYWxseSwgYXMgcnVsZXMgYXJlIGNoYW5nZWQgdGhleSBvbmx5IGFwcGx5IHRvIG5ldyByZWdpb25zLCBhbmQgb2xkXG4gKiByZWdpb25zIGFyZSBsZWZ0IGFzLWlzLlxuICpcbiAqIFdlIG1peCB0aGUgbGlzdCBvZiByZWdpb25zIHdpdGggYSBsaXN0IG9mIHJ1bGVzIHRoYXQgd2VyZSBpbnRyb2R1Y2VkIG92ZXJcbiAqIHRpbWUgKHJ1bGVzIGFyZSBzeW1ib2xzKS5cbiAqXG4gKiBUaGVyZWZvcmUsIGlmIHdlIHdhbnQgdG8ga25vdyBpZiBhIHJ1bGUgYXBwbGllcyB0byBhIGNlcnRhaW4gcmVnaW9uLCB3ZVxuICogb25seSBuZWVkIHRvIGNoZWNrIGl0cyBwb3NpdGlvbiBpbiB0aGUgbGlzdCBhbmQgY29tcGFyZSBpdCB0byB3aGVuIGFcbiAqIHJ1bGUgd2FzIGludHJvZHVjZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBBV1NfUkVHSU9OU19BTkRfUlVMRVM6IHJlYWRvbmx5IChzdHJpbmcgfCBzeW1ib2wpW10gPSBbXG4gICd1cy1lYXN0LTEnLCAvLyBVUyBFYXN0IChOLiBWaXJnaW5pYSlcbiAgJ2V1LXdlc3QtMScsIC8vIEV1cm9wZSAoSXJlbGFuZClcbiAgJ3VzLXdlc3QtMScsIC8vIFVTIFdlc3QgKE4uIENhbGlmb3JuaWEpXG4gICdhcC1zb3V0aGVhc3QtMScsIC8vIEFzaWEgUGFjaWZpYyAoU2luZ2Fwb3JlKVxuICAnYXAtbm9ydGhlYXN0LTEnLCAvLyBBc2lhIFBhY2lmaWMgKFRva3lvKVxuICAndXMtZ292LXdlc3QtMScsIC8vIEFXUyBHb3ZDbG91ZCAoVVMtV2VzdClcbiAgJ3VzLXdlc3QtMicsIC8vIFVTIFdlc3QgKE9yZWdvbilcbiAgJ3NhLWVhc3QtMScsIC8vIFNvdXRoIEFtZXJpY2EgKFPDo28gUGF1bG8pXG4gICdhcC1zb3V0aGVhc3QtMicsIC8vIEFzaWEgUGFjaWZpYyAoU3lkbmV5KVxuICBSVUxFX1MzX1dFQlNJVEVfUkVHSU9OQUxfU1VCRE9NQUlOLFxuICAnY24tbm9ydGgtMScsIC8vIENoaW5hIChCZWlqaW5nKVxuICAndXMtaXNvLWVhc3QtMScsIC8vIEFXUyBJU09cbiAgJ2V1LWNlbnRyYWwtMScsIC8vIEV1cm9wZSAoRnJhbmtmdXJ0KVxuICAnYXAtbm9ydGhlYXN0LTInLCAvLyBBc2lhIFBhY2lmaWMgKFNlb3VsKVxuICAnYXAtc291dGgtMScsIC8vIEFzaWEgUGFjaWZpYyAoTXVtYmFpKVxuICAndXMtZWFzdC0yJywgLy8gVVMgRWFzdCAoT2hpbylcbiAgJ2NhLWNlbnRyYWwtMScsIC8vIENhbmFkYSAoQ2VudHJhbClcbiAgJ2V1LXdlc3QtMicsIC8vIEV1cm9wZSAoTG9uZG9uKVxuICAndXMtaXNvYi1lYXN0LTEnLCAvLyBBV1MgSVNPLUJcbiAgJ2NuLW5vcnRod2VzdC0xJywgLy8gQ2hpbmEgKE5pbmd4aWEpXG4gICdldS13ZXN0LTMnLCAvLyBFdXJvcGUgKFBhcmlzKVxuICAnYXAtbm9ydGhlYXN0LTMnLCAvLyBBc2lhIFBhY2lmaWMgKE9zYWthKVxuICAndXMtZ292LWVhc3QtMScsIC8vIEFXUyBHb3ZDbG91ZCAoVVMtRWFzdClcbiAgJ2V1LW5vcnRoLTEnLCAvLyBFdXJvcGUgKFN0b2NraG9sbSlcbiAgUlVMRV9DTEFTU0lDX1BBUlRJVElPTl9CRUNPTUVTX09QVF9JTixcbiAgJ2FwLWVhc3QtMScsIC8vIEFzaWEgUGFjaWZpYyAoSG9uZyBLb25nKVxuICAnbWUtc291dGgtMScsIC8vIE1pZGRsZSBFYXN0IChCYWhyYWluKVxuICAnYWYtc291dGgtMScsIC8vIEFmcmljYSAoQ2FwZSBUb3duKVxuICAnZXUtc291dGgtMScsIC8vIEV1cm9wZSAoTWlsYW4pXG4gICd1cy1pc28td2VzdC0xJywgLy8gVVMgSVNPIFdlc3RcbiAgJ2FwLXNvdXRoZWFzdC0zJywgLy8gQXNpYSBQYWNpZmljIChKYWthcnRhKVxuICAnbWUtY2VudHJhbC0xJywgLy8gTWlkZGxlIEVhc3QgKFVBRSlcbiAgJ2V1LWNlbnRyYWwtMicsIC8vIEV1cm9wZSAoWnVyaWNoKVxuICAnZXUtc291dGgtMicsIC8vIEV1cm9wZSAoU3BhaW4pXG4gICdhcC1zb3V0aC0yJywgLy8gQXNpYSBQYWNpZmljIChIeWRlcmFiYWQpXG4gICdhcC1zb3V0aGVhc3QtNCcsIC8vIEFzaWEgUGFjaWZpYyAoTWVsYm91cm5lKVxuICAnaWwtY2VudHJhbC0xJywgLy8gSXNyYWVsIChUZWwgQXZpdilcbiAgJ2NhLXdlc3QtMScsIC8vIENhbmFkYSBXZXN0IChDYWxnYXJ5KVxuICAnYXAtc291dGhlYXN0LTUnLCAvLyBBc2lhIFBhY2lmaWMgKE1hbGF5c2lhKVxuICAnYXAtc291dGhlYXN0LTcnLCAvLyBBc2lhIFBhY2lmaWMgKFRoYWlsYW5kKVxuICAnbXgtY2VudHJhbC0xJywgLy8gTWV4aWNvIChDZW50cmFsKVxuICAnZXUtaXNvZS13ZXN0LTEnLCAvLyBFVSBJU08tRSBXZXN0XG4gICd1cy1pc29iLXdlc3QtMScsIC8vIFVTIElTT0IgV2VzdFxuICAnYXAtZWFzdC0yJywgLy8gQXNpYSBQYWNpZmljIChUYWlwZWkpXG5dO1xuXG4vKipcbiAqIFRoZSBuYW1lcyBvZiBhbGwgKGtub3duKSBBV1MgcmVnaW9uc1xuICpcbiAqIE5vdCBpbiB0aGUgbGlzdCA9PT4gbm8gYnVpbHQtaW4gZGF0YSBmb3IgdGhhdCByZWdpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBBV1NfUkVHSU9OUyA9IEFXU19SRUdJT05TX0FORF9SVUxFU1xuICAuZmlsdGVyKCh4KSA9PiB0eXBlb2YgeCA9PT0gJ3N0cmluZycpXG4gIC5zb3J0KCkgYXMgcmVhZG9ubHkgc3RyaW5nW107XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgYSByZWdpb24gcHJlZGF0ZXMgYSBnaXZlbiBydWxlIChvciByZWdpb24pLlxuICpcbiAqIFVua25vd24gcmVnaW9uID0+IHdlIGhhdmUgdG8gYXNzdW1lIG5vLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmVmb3JlKHJlZ2lvbjogc3RyaW5nLCBydWxlT3JSZWdpb246IHN0cmluZyB8IHN5bWJvbCkge1xuICBjb25zdCBydWxlSXggPSBBV1NfUkVHSU9OU19BTkRfUlVMRVMuaW5kZXhPZihydWxlT3JSZWdpb24pO1xuICBpZiAocnVsZUl4ID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBydWxlOiAke1N0cmluZyhydWxlT3JSZWdpb24pfWApO1xuICB9XG4gIGNvbnN0IHJlZ2lvbkl4ID0gQVdTX1JFR0lPTlNfQU5EX1JVTEVTLmluZGV4T2YocmVnaW9uKTtcbiAgcmV0dXJuIHJlZ2lvbkl4ID09PSAtMSA/IGZhbHNlIDogcmVnaW9uSXggPCBydWxlSXg7XG59XG5cbi8qKlxuICogUmV0dXJuIGFsbCByZWdpb25zIGJlZm9yZSBhIGdpdmVuIHJ1bGUgd2FzIGludHJvZHVjZWQgKG9yIHJlZ2lvbilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lvbnNCZWZvcmUocnVsZU9yUmVnaW9uOiBzdHJpbmcgfCBzeW1ib2wpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHJ1bGVJeCA9IEFXU19SRUdJT05TX0FORF9SVUxFUy5pbmRleE9mKHJ1bGVPclJlZ2lvbik7XG4gIGlmIChydWxlSXggPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHJ1bGU6ICR7U3RyaW5nKHJ1bGVPclJlZ2lvbil9YCk7XG4gIH1cbiAgcmV0dXJuIEFXU19SRUdJT05TX0FORF9SVUxFUy5zbGljZSgwLCBydWxlSXgpXG4gICAgLmZpbHRlcigoZW50cnkpID0+IHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpXG4gICAgLnNvcnQoKSBhcyBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWdpb24geyByZWFkb25seSBwYXJ0aXRpb246IHN0cmluZzsgcmVhZG9ubHkgZG9tYWluU3VmZml4OiBzdHJpbmcgfVxuXG5jb25zdCBQQVJUSVRJT05fTUFQOiB7cmVhZG9ubHkgW3JlZ2lvbjogc3RyaW5nXTogUmVnaW9uIH0gPSB7XG4gICdkZWZhdWx0JzogeyBwYXJ0aXRpb246ICdhd3MnLCBkb21haW5TdWZmaXg6ICdhbWF6b25hd3MuY29tJyB9LFxuICAnY24tJzogeyBwYXJ0aXRpb246ICdhd3MtY24nLCBkb21haW5TdWZmaXg6ICdhbWF6b25hd3MuY29tLmNuJyB9LFxuICAndXMtZ292LSc6IHsgcGFydGl0aW9uOiAnYXdzLXVzLWdvdicsIGRvbWFpblN1ZmZpeDogJ2FtYXpvbmF3cy5jb20nIH0sXG4gICd1cy1pc28tJzogeyBwYXJ0aXRpb246ICdhd3MtaXNvJywgZG9tYWluU3VmZml4OiAnYzJzLmljLmdvdicgfSxcbiAgJ3VzLWlzb2ItJzogeyBwYXJ0aXRpb246ICdhd3MtaXNvLWInLCBkb21haW5TdWZmaXg6ICdzYzJzLnNnb3YuZ292JyB9LFxuICAndXMtaXNvZi0nOiB7IHBhcnRpdGlvbjogJ2F3cy1pc28tZicsIGRvbWFpblN1ZmZpeDogJ2NzcC5oY2kuaWMuZ292JyB9LFxuICAnZXUtaXNvZS0nOiB7IHBhcnRpdGlvbjogJ2F3cy1pc28tZScsIGRvbWFpblN1ZmZpeDogJ2Nsb3VkLmFkYy1lLnVrJyB9LFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnRpdGlvbkluZm9ybWF0aW9uKHJlZ2lvbjogc3RyaW5nKTogUmVnaW9uIHtcbiAgZm9yIChjb25zdCBbcHJlZml4LCBpbmZvXSBvZiBPYmplY3QuZW50cmllcyhQQVJUSVRJT05fTUFQKSkge1xuICAgIGlmIChyZWdpb24uc3RhcnRzV2l0aChwcmVmaXgpKSB7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFBBUlRJVElPTl9NQVAuZGVmYXVsdDtcbn1cbiJdfQ==